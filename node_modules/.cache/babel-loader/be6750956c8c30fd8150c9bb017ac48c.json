{"ast":null,"code":"import _classCallCheck from\"/Users/andrewpemberton/Desktop/Bootcamp/clicky-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/andrewpemberton/Desktop/Bootcamp/clicky-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/andrewpemberton/Desktop/Bootcamp/clicky-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/andrewpemberton/Desktop/Bootcamp/clicky-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import CardDisplay from\"./components/card-display\";import cast from\"./futurama-cast.json\";import Header from\"./components/header\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.clickHandle=function(id){var shuffle=_this.state.cast.map(function(cast){if(cast.id===id){if(cast.clicked===false){_this.updateScore();if(_this.state.score>=_this.state.highScore){_this.updateHighScore();if(_this.state.highScore===_this.state.cast.length){_this.winGame();}}cast.clicked=true;}else{_this.restartGame();}}return cast;});_this.shuffleCards(shuffle);console.log(shuffle);_this.setState({cast:shuffle});};_this.shuffleCards=function(newInfo){newInfo.sort(function(){return Math.random()-0.5;});};_this.updateScore=function(){_this.setState({score:_this.state.score+1});};_this.updateHighScore=function(){_this.setState({highScore:_this.state.highScore+1});};_this.winGame=function(){alert(\"You've won\");_this.setState({highScore:0});_this.restartGame();};_this.restartGame=function(){_this.setState({score:0});var resetInfo=_this.state.cast.map(function(cast){cast.clicked=false;return cast;});_this.setState({cast:resetInfo});};_this.state={score:0,cast:cast,highScore:0};return _this;}_createClass(App,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Header,{score:this.state.score,highScore:this.state.highScore}),/*#__PURE__*/React.createElement(CardDisplay,{cast:this.state.cast,onClick:this.clickHandle}));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/andrewpemberton/Desktop/Bootcamp/clicky-game/src/App.js"],"names":["React","Component","CardDisplay","cast","Header","App","props","clickHandle","id","shuffle","state","map","clicked","updateScore","score","highScore","updateHighScore","length","winGame","restartGame","shuffleCards","console","log","setState","newInfo","sort","Math","random","alert","resetInfo"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CardDisplay from \"./components/card-display\";\nimport cast from \"./futurama-cast.json\";\nimport Header from \"./components/header\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      cast,\n      highScore: 0,\n    };\n  }\n  clickHandle = (id) => {\n    let shuffle = this.state.cast.map((cast) => {\n      if (cast.id === id) {\n        if (cast.clicked === false) {\n          this.updateScore();\n          if (this.state.score >= this.state.highScore) {\n            this.updateHighScore();\n            if (this.state.highScore === this.state.cast.length) {\n              this.winGame();\n            }\n          }\n          cast.clicked = true;\n        } else {\n          this.restartGame();\n        }\n      }\n      return cast;\n    });\n    this.shuffleCards(shuffle);\n    console.log(shuffle);\n    this.setState({ cast: shuffle });\n  };\n\n  shuffleCards = (newInfo) => {\n    newInfo.sort(() => Math.random() - 0.5);\n  };\n\n  updateScore = () => {\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  updateHighScore = () => {\n    this.setState({ highScore: this.state.highScore + 1 });\n  };\n\n  winGame = () => {\n    alert(\"You've won\");\n    this.setState({ highScore: 0 });\n    this.restartGame();\n  };\n  restartGame = () => {\n    this.setState({ score: 0 });\n    let resetInfo = this.state.cast.map((cast) => {\n      cast.clicked = false;\n      return cast;\n    });\n    this.setState({ cast: resetInfo });\n  };\n  render() {\n    return (\n      <div>\n        <Header score={this.state.score} highScore={this.state.highScore} />\n\n        <CardDisplay cast={this.state.cast} onClick={this.clickHandle} />\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}