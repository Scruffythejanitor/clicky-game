{"version":3,"sources":["components/card-display.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["CardDisplay","props","className","cast","map","item","key","id","clasName","onClick","alt","name","src","image","Header","score","highScore","App","clickHandle","shuffle","state","clicked","updateScore","updateHighScore","length","winGame","restartGame","shuffleCards","console","log","setState","newInfo","sort","Math","random","alert","resetInfo","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uMAyBeA,MAvBf,SAAqBC,GAEjB,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,qBACVD,EAAME,KAAKC,KAAI,SAAAC,GAAI,OAChB,yBAAKC,IAAKD,EAAKE,GAAIL,UAAU,cACzB,yBAAKA,UAAU,gBACX,yBAAKM,SAAS,aAEV,yBAAKC,QAAS,WACVR,EAAMQ,QAAQJ,EAAKE,KAErBL,UAAU,uBAAuBQ,IAAKL,EAAKM,KAAMC,IAAKP,EAAKQ,iB,OCG9EC,MAhBf,SAAgBb,GACZ,OAAO,yBAAKC,UAAU,yBACpB,wBAAIA,UAAU,UAAd,yBACA,gEACA,yBAAKA,UAAU,YAEf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,iBAAgB,sCAAYD,EAAMc,MAAlB,MAC/B,yBAAKb,UAAU,aACf,yBAAKA,UAAU,iBAAgB,2CAAiBD,EAAMe,WAAtD,KACA,yBAAKd,UAAU,gBC+DNe,E,kDApEb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAORiB,YAAc,SAACX,GACb,IAAIY,EAAU,EAAKC,MAAMjB,KAAKC,KAAI,SAACD,GAejC,OAdIA,EAAKI,KAAOA,KACO,IAAjBJ,EAAKkB,SACP,EAAKC,cACD,EAAKF,MAAML,OAAS,EAAKK,MAAMJ,YACjC,EAAKO,kBACD,EAAKH,MAAMJ,YAAc,EAAKI,MAAMjB,KAAKqB,QAC3C,EAAKC,WAGTtB,EAAKkB,SAAU,GAEf,EAAKK,eAGFvB,KAET,EAAKwB,aAAaR,GAClBS,QAAQC,IAAIV,GACZ,EAAKW,SAAS,CAAE3B,KAAMgB,KA5BL,EA+BnBQ,aAAe,SAACI,GACdA,EAAQC,MAAK,kBAAMC,KAAKC,SAAW,OAhClB,EAmCnBZ,YAAc,WACZ,EAAKQ,SAAS,CAAEf,MAAO,EAAKK,MAAML,MAAQ,KApCzB,EAuCnBQ,gBAAkB,WAChB,EAAKO,SAAS,CAAEd,UAAW,EAAKI,MAAMJ,UAAY,KAxCjC,EA2CnBS,QAAU,WACRU,MAAM,cACN,EAAKL,SAAS,CAAEd,UAAW,IAC3B,EAAKU,eA9CY,EAgDnBA,YAAc,WACZ,EAAKI,SAAS,CAAEf,MAAO,IACvB,IAAIqB,EAAY,EAAKhB,MAAMjB,KAAKC,KAAI,SAACD,GAEnC,OADAA,EAAKkB,SAAU,EACRlB,KAET,EAAK2B,SAAS,CAAE3B,KAAMiC,KApDtB,EAAKhB,MAAQ,CACXL,MAAO,EACPZ,OACAa,UAAW,GALI,E,qDAyDjB,OACE,6BACE,kBAAC,EAAD,CAAQD,MAAOsB,KAAKjB,MAAML,MAAOC,UAAWqB,KAAKjB,MAAMJ,YAEvD,kBAAC,EAAD,CAAab,KAAMkC,KAAKjB,MAAMjB,KAAMM,QAAS4B,KAAKnB,mB,GA9DxCoB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.bc3d3aad.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction CardDisplay(props) {\n\n    return (\n        <div className=\"container\">\n            <div className=\"img-container row\">\n                {props.cast.map(item => (\n                    <div key={item.id} className=\"col-3 pb-4\">\n                        <div className=\"card shadow \">\n                            <div clasName=\"card-body\">\n\n                                <img onClick={() => {\n                                    props.onClick(item.id)\n                                }\n                                } className=\"img-fluid rounded-lg\" alt={item.name} src={item.image} />\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default CardDisplay;","import React from \"react\";\n\nfunction Header(props) {\n    return <div className=\"jumbotron text-center\">\n      <h1 className=\"strong\">Good Memory Everyone!</h1>\n      <h3>...Now what was I talking about?</h3>\n      <div className=\"row mt-5\">\n\n      <div className=\"col-md-2\"></div>\n      <div className=\"card col-md-3\"><h2>Score: {props.score} </h2></div>\n      <div className=\"col-md-2\"></div>\n      <div className=\"card col-md-3\"><h2>High Score: {props.highScore}</h2> </div>\n      <div className=\"col-md-2\"></div>\n      </div>\n    \n  </div>\n}\n\nexport default Header;","import React, { Component } from \"react\";\nimport CardDisplay from \"./components/card-display\";\nimport cast from \"./futurama-cast.json\";\nimport Header from \"./components/header\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      cast,\n      highScore: 0,\n    };\n  }\n  clickHandle = (id) => {\n    let shuffle = this.state.cast.map((cast) => {\n      if (cast.id === id) {\n        if (cast.clicked === false) {\n          this.updateScore();\n          if (this.state.score >= this.state.highScore) {\n            this.updateHighScore();\n            if (this.state.highScore === this.state.cast.length) {\n              this.winGame();\n            }\n          }\n          cast.clicked = true;\n        } else {\n          this.restartGame();\n        }\n      }\n      return cast;\n    });\n    this.shuffleCards(shuffle);\n    console.log(shuffle);\n    this.setState({ cast: shuffle });\n  };\n\n  shuffleCards = (newInfo) => {\n    newInfo.sort(() => Math.random() - 0.5);\n  };\n\n  updateScore = () => {\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  updateHighScore = () => {\n    this.setState({ highScore: this.state.highScore + 1 });\n  };\n\n  winGame = () => {\n    alert(\"You've won\");\n    this.setState({ highScore: 0 });\n    this.restartGame();\n  };\n  restartGame = () => {\n    this.setState({ score: 0 });\n    let resetInfo = this.state.cast.map((cast) => {\n      cast.clicked = false;\n      return cast;\n    });\n    this.setState({ cast: resetInfo });\n  };\n  render() {\n    return (\n      <div>\n        <Header score={this.state.score} highScore={this.state.highScore} />\n\n        <CardDisplay cast={this.state.cast} onClick={this.clickHandle} />\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}